version: '3.8'

services:
  app:
    build: .
    container_name: whatsappbot_app
    environment:
      - NODE_ENV=production
      - DB_HOST=${DB_HOST}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - DB_DIALECT=postgres
      - DB_SSL=true
      - DB_SSL_REJECT_UNAUTHORIZED=false
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - SQS_INCOMING_QUEUE_URL=${SQS_INCOMING_QUEUE_URL}
      - SQS_OUTGOING_QUEUE_URL=${SQS_OUTGOING_QUEUE_URL}
      - APP_FILE=app.js
      - WS_AUTH_TOKEN=${WS_AUTH_TOKEN}
      - WS_SERVER_URL=${WS_SERVER_URL}
    ports:
      - "3002:3002"
    depends_on:
      db:
        condition: service_started
    networks:
      - whatsappbot_network
    restart: on-failure

  dashboard:
    build: .
    container_name: whatsappbot_dashboard
    environment:
      - NODE_ENV=production
      - DB_HOST=${DB_HOST}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - DB_DIALECT=postgres
      - DB_SSL=true
      - DB_SSL_REJECT_UNAUTHORIZED=false
      - APP_FILE=dashboard.js
    ports:
      - "3005:3005"
    depends_on:
      db:
        condition: service_started
    networks:
      - whatsappbot_network
    restart: on-failure

  db:
    image: postgres:14
    container_name: whatsappbot_db
    command: -c ssl=on -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - whatsappbot_network

volumes:
  postgres_data:

networks:
  whatsappbot_network:
    driver: bridge